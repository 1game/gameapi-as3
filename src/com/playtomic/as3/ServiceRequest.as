package com.playtomic.as3 {	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.URLVariables;	import flash.net.URLLoaderDataFormat;	import flash.utils.Timer;	import flash.utils.ByteArray;	import flash.system.Security;		internal final class ServiceRequest	{		private static var URL:String;		private static var PrivateKey:String;		private static var PublicKey:String;		private static var FailResponse:Response;				public static function initialize(publickey:String, privatekey:String, apiurl:String):void		{			if(apiurl.lastIndexOf("/") != apiurl.length - 1) {				apiurl += "/";			}						URL = apiurl + "v1?publickey=" + publickey;			PrivateKey = privatekey;			FailResponse = new Response(false, 1)			Security.loadPolicyFile(apiurl + "crossdomain.xml");		}				public static function load(section:String, action:String, handler:Function, callback:Function, data:Object = null):void		{			var postdata:Object = data || {};			postdata.section = section;			postdata.action = action;			postdata.publickey = PublicKey;						var pds:String = new JSONEncoder(postdata).getString();			var pba:ByteArray = new ByteArray();			pba.writeUTFBytes(pds);						var ignore:Function = function(e:Event):void { };						var complete:Function = function(e:Event):void  {				Debug.log("[GameBase.ServiceRequest.Complete] Service request completed (" + section + " -> " + action + ")");								if(callback == null || handler == null)					return;									var data:Object = new JSONDecoder(request.data).getValue();				handler(callback, data, new Response(data.success, data.errorcode));			}						var fail:Function = function(e:Event):void {				Debug.log("[GameBase.ServiceRequest.Fail] Service request failed: " + e.toString());								if(callback == null)					return;									handler(callback, {}, FailResponse);			}						var postvars:URLVariables = new URLVariables();			postvars.data = Encode.base64(pba);			postvars.hash = Encode.md5(pds + PrivateKey);						var request:URLLoader = new URLLoader();			request.addEventListener("diskError", fail, false, 1, false);			request.addEventListener("ioError", fail, false, 1, false);			request.addEventListener("networkError", fail, false, 1, false);			request.addEventListener("verifyError", fail, false, 1, false);			request.addEventListener("networkError", fail, false, 1, false);			request.addEventListener("verifyError", fail, false, 1, false);			request.addEventListener("securityError", fail, false, 1, false);			request.addEventListener("uncaughtError", fail, false, 1, false);			request.addEventListener("httpStatus", ignore, false, 1, false);			request.addEventListener("complete", complete, false, 1, false);						var urlrequest:URLRequest = new URLRequest();			urlrequest.url = URL;			urlrequest.method = "POST";			urlrequest.data = postvars;						try			{				request.load(urlrequest);			}			catch(s:Error)			{				handler(callback, {}, FailResponse);			}		}	}}