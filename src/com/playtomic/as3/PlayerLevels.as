package com.playtomic.as3 {		import flash.net.SharedObject;		public final class PlayerLevels {				public function PlayerLevels() { } 				public static const NEWEST:String = "newest";		public static const POPULAR:String = "popular";		private static var RatingCookie:SharedObject;				private static const SECTION:String = "playerlevels";		private static const SAVE:String = "save";		private static const LIST:String = "list";		private static const LOAD:String = "load";		private static const RATE:String = "rate";				/**		 * Rates a player level		 * @param	levelid			The ID of a user-created level		 * @param	rating			Integer rating from 1 - 10		 * @param	callback		Your function to receive the response:  function(response:Response)		 */		public static function rate(levelid:String, rating:int, callback:Function = null):void {						if (!levelid) {				if(callback != null) {					callback(new Response(false, 404));					Debug.log("[GameBase.PlayerLevels.Rate] Error your options object does not include the levelid.");				}								return;			}						if (!rating) {				if(callback != null) {					callback(new Response(false, 401));					Debug.log("[GameBase.PlayerLevels.Rate] Error your options object does not include a rating.");				}				return;			}						// limits are arbitrary			if (!(rating > 0 && rating < 10)) {				if (callback != null) {					Debug.log("[GameBase.PlayerLevels.Rate] Error level ratings must be 1 - 10.");					callback(new Response(false, 401));				}				return;			}						// check if rated			if (RatingCookie == null) {				RatingCookie = SharedObject.getLocal("playtomic.ratings");			}						if(RatingCookie.data[levelid] != null)			{				if(callback != null)				{					callback(new Response(false, 402));				}								return;			}						if(rating < 0 || rating > 10)			{				if(callback != null)				{					callback(new Response(false, 401));				}								return;			}						RatingCookie.data[levelid] = rating;						ServiceRequest.load(SECTION, RATE, rateComplete, callback, { levelid: levelid, rating: rating } );		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	data		The data returned from the server		 * @param	response	The response from the server		 */		private static function rateComplete(callback:Function, data:Object = null, response:Response = null):void {			if(callback == null)				return;							callback(response);		}		/**		 * Loads a player level		 * @param	levelid			The playerLevel.LevelId 		 * @param	callback		Your function to receive the response:  function(response:Response)		 */		public static function load(levelid:String, callback:Function = null):void {								ServiceRequest.load(SECTION, LOAD, loadComplete, callback, {levelid: levelid});		}					/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	data		The data returned from the server		 * @param	response	The response from the server		 */		private static function loadComplete(callback:Function, data:Object = null, response:Response = null):void {			if(callback == null)				return;						callback(data.level, response);		}		/**		 * Lists player levels		 * @param	callback		Your function to receive the response:  function(response:Response)		 * @param	options			The list options, see http://playtomic.com/api/as3#PlayerLevels		 */		public static function list(options:Object = null, callback:Function = null):void {						if(options == null)				options = new Object();							ServiceRequest.load(SECTION, LIST, listComplete, callback, options);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	data		The data returned from the server		 * @param	response	The response from the server		 */		private static function listComplete(callback:Function,data:Object = null, response:Response = null):void {			if(callback == null)				return;						callback(data.levels, data.numlevels, response);		}				/**		 * Saves a player level		 * @param	level			The Level to save		 * @param	callback		Your function to receive the response:  function(level:Level, response:Response)		 */		public static function save(level:Object, callback:Function = null):void {			ServiceRequest.load(SECTION, SAVE, saveComplete, callback, level);			}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	data		The data returned from the server		 * @param	response	The response from the server		 */		private static function saveComplete(callback:Function, data:Object = null, response:Response = null):void {			if(callback == null)				return;							callback(data.level, response);					}		}}